validation_noncoding_pathogenic = rbind(validation_noncoding_pathogenic%>%filter(PATHO==1),
sample_n(validation_noncoding_pathogenic%>%filter(PATHO==0),23))
noncoding_pathogenic = sv_noncoding_cds%>%filter(PATHO==1)#245
dim(noncoding_pathogenic)
setwd("/Volumes/G-DRIVE USB-C/SV/curation")
write.table(ncbi_common_noncoding,'sv_noncoding_common.bed',quote = F,sep='\t',row.names = F,col.names = F)
dim(sv_noncoding)
write.table(sv_noncoding,'sv_noncoding_rare.bed',quote = F,sep='\t',row.names = F,col.names = F)
write.table(sv_noncoding_cds,'noncoding_cds.bed',quote = F,sep='\t',row.names = F,col.names = F)
write.table(train_noncoding_pathogenic,'train_noncoding_pathogeneic.bed',quote = F,sep='\t',row.names = F,col.names = F)
write.table(validation_noncoding_pathogenic,'validation_noncoding_pathogeneic.bed',quote = F,sep='\t',row.names = F,col.names = F)
write.table(test_noncoding_pathogenic,'test_noncoding_pathogeneic.bed',quote = F,sep='\t',row.names = F,col.names = F)
write.table(noncoding_pathogenic,'noncoding_pathogenic.bed',quote = F,sep='\t',row.names = F,col.names = F)
setwd("~/Documents/Project_PhenoSV/data/SV/meta")
write.csv(sv_noncoding_cds,'sv_noncoding_cds.csv',row.names = F)
write.csv(train_noncoding_pathogenic,'train_noncoding_pathogenic.csv',row.names = F)
write.csv(validation_noncoding_pathogenic,'validation_noncoding_pathogenic.csv',row.names = F)
write.csv(test_noncoding_pathogenic,'test_noncoding_pathogenic.csv',row.names = F)
write.csv(noncoding_pathogenic,'noncoding_pathogenic.csv',row.names = F)
#---use for fine tune
sv_noncoding_cds=read.csv('sv_noncoding_cds.csv')
#---use for fine tune
sv_noncoding_cds=read.csv('sv_noncoding_cds.csv')
head(sv_noncoding_cds)
patho = sv_noncoding_cds%>%filter(PATHO==1)%>%as.data.frame()
benign = sv_noncoding_cds%>%filter(PATHO==0)%>%as.data.frame()
benign_intersect = bedr(input = list(a=patho, b=benign), params='-wa -wb', method = 'intersect')
benign_intersect
colnames(benign_intersect) = c('CHR','START','END','ID','SVLEN','STRAND','SVTYPE','PATHO','DATASET',
'CHR2','START2','END2','ID2','SVLEN2','STRAND2','SVTYPE2','PATHO2','DATASET2')
View(benign_intersect)
benign_intersect%>%filter(SVTYPE==SVTYPE2)
benign_intersect = benign_intersect%>%filter(SVTYPE==SVTYPE2)
benign_intersect = unique(benign_intersect$ID2)
sv_noncoding_cds_selected = sv_noncoding_cds%>%filter(ID%in%benign_intersect==F)%>%arrange(CHR,START,END)
dim(sv_noncoding_cds_selected)
benign = benign%>%filter(ID%in%benign_intersect==F)%>%arrange(CHR,START,END)%>%as.data.frame()
benign_closest = bedr(input = list(a=patho, b=benign), params='-d -t all', method = 'closest')
benign_closest
View(benign_closest)
#---use for fine tune
sv_noncoding_cds=read.csv('sv_noncoding_cds.csv')
patho = sv_noncoding_cds%>%filter(PATHO==1)%>%as.data.frame()
benign = sv_noncoding_cds%>%filter(PATHO==0)%>%as.data.frame()
benign_intersect = bedr(input = list(a=patho, b=benign), params='-wa -wb', method = 'intersect')
colnames(benign_intersect) = c('CHR','START','END','ID','SVLEN','STRAND','SVTYPE','PATHO','DATASET',
'CHR2','START2','END2','ID2','SVLEN2','STRAND2','SVTYPE2','PATHO2','DATASET2')
benign_intersect = unique(benign_intersect$ID2)
benign = benign%>%filter(ID%in%benign_intersect==F)%>%arrange(CHR,START,END)%>%as.data.frame()
benign_closest = bedr(input = list(a=patho, b=benign), params='-d -t all', method = 'closest')
benign_closest
colnames(benign_closest) = c('CHR','START','END','ID','SVLEN','STRAND','SVTYPE','PATHO','DATASET',
'CHR2','START2','END2','ID2','SVLEN2','STRAND2','SVTYPE2','PATHO2','DATASET2')
noncoding_pathogenic_selected = sv_noncoding_cds%>%filter(ID%in%c(patho$ID,benign_closest$ID2))
table(noncoding_pathogenic_selected$PATHO)
sv_noncoding_cds=read.csv('sv_noncoding_cds.csv')
patho = sv_noncoding_cds%>%filter(PATHO==1)%>%as.data.frame()
benign = sv_noncoding_cds%>%filter(PATHO==0)%>%as.data.frame()
benign_intersect = bedr(input = list(a=patho, b=benign), params='-wa -wb', method = 'intersect')
colnames(benign_intersect) = c('CHR','START','END','ID','SVLEN','STRAND','SVTYPE','PATHO','DATASET',
'CHR2','START2','END2','ID2','SVLEN2','STRAND2','SVTYPE2','PATHO2','DATASET2')
benign_intersect = unique(benign_intersect$ID2)
benign = benign%>%filter(ID%in%benign_intersect==F)%>%arrange(CHR,START,END)%>%as.data.frame()
dim(benign)
benign
#benign_closest = bedr(input = list(a=patho, b=benign), params='-d -t all', method = 'closest')
#colnames(benign_closest) = c('CHR','START','END','ID','SVLEN','STRAND','SVTYPE','PATHO','DATASET',
#                               'CHR2','START2','END2','ID2','SVLEN2','STRAND2','SVTYPE2','PATHO2','DATASET2')
noncoding_pathogenic_selected = sv_noncoding_cds%>%filter(ID%in%c(patho$ID,benign_closest$ID))
setwd("~/Documents/Project_PhenoSV/data/SV/meta")
train_noncoding_pathogenic_selected = sv_noncoding_cds_selected%>%filter(CHR%in%paste0('chr',c(11:13))==F)
table(train_noncoding_pathogenic_selected$PATHO)
6802/222
set.seed(42)
train_noncoding_pathogenic_selected = rbind(train_noncoding_pathogenic_selected%>%filter(PATHO==1),
sample_n(train_noncoding_pathogenic_selected%>%filter(PATHO==0),222))
validation_noncoding_pathogenic_selected = sv_noncoding_cds_selected%>%filter(CHR%in%paste0('chr',c(11:13)))
table(validation_noncoding_pathogenic_selected$PATHO)
set.seed(42)
validation_noncoding_pathogenic_selected = rbind(validation_noncoding_pathogenic_selected%>%filter(PATHO==1),
sample_n(validation_noncoding_pathogenic_selected%>%filter(PATHO==0),23))
write.csv(train_noncoding_pathogenic_selected,'train_noncoding_pathogenic_selected.csv',row.names = F)
write.csv(validation_noncoding_pathogenic_selected,'validation_noncoding_pathogenic_selected.csv',row.names = F)
table(train_noncoding_pathogenic_selected)
table(train_noncoding_pathogenic_selected$PATHO)
444/32
head(train_noncoding_pathogenic_selected)
#---use for fine tune
sv_noncoding_cds=read.csv('sv_noncoding_cds.csv')
head(sv_noncoding_cds)
######################################prioritization######################################
setwd("~/Documents/Project_PhenoSV/data/SV/meta")
#coding background
ncbi_common = fread("/Volumes/G-DRIVE USB-C/SV/curation/sv_coding_common_1124.bed")
lr_rare = fread("/Volumes/G-DRIVE USB-C/SV/curation/sv_coding_rare_1124.bed")%>%filter(DATASET=='lr_rare')
coding_background = rbind(ncbi_common,lr_rare)
#noncoding background
lr_rare = fread("/Volumes/G-DRIVE USB-C/SV/curation/sv_noncoding_rare.bed")%>%filter(V9=='lr_rare')
ncbi_common = fread("/Volumes/G-DRIVE USB-C/SV/curation/sv_noncoding_common.bed")
noncoding_background = rbind(lr_rare,ncbi_common)
colnames(noncoding_background) = colnames(coding_background)
#combine background
background_data=rbind(coding_background,noncoding_background)
#add af
ncbi_common_af = read.csv("/Volumes/G-DRIVE USB-C/SV/rawdata/SV/dbvar/GRCh38/NCBI_Common/nstd186_af.csv")
background_data = left_join(background_data,ncbi_common_af)%>%
mutate(AF=ifelse(is.na(AF),0.01,AF))%>%filter(CHR%in%paste0('chr',1:22))
background_data = unique(background_data)
write.csv(background_data,'~/Documents/Project_PhenoSV/data/SV/meta/background_data.csv',row.names = F)
write.table(background_data,'/Volumes/G-DRIVE USB-C/SV/curation/background_data.bed',quote = F,sep='\t',row.names = F)
#coding pheno
#clinvar test pheno
clinvar_pheno = read.csv("/Volumes/G-DRIVE USB-C/SV/inter/ClinVar_Pheno.csv")
clinvar_test_coding_pheno = fread("/Volumes/G-DRIVE USB-C/SV/curation/test_clinvar_1124.bed")%>%
filter(ID%in%clinvar_pheno$ID & PATHO==1)#1027
#decipher test pheno
decipher_pheno = read.csv("/Volumes/G-DRIVE USB-C/SV/inter/decipher_pheno.csv")%>%filter(HPO!="")
decipher_test_coding_pheno = fread("/Volumes/G-DRIVE USB-C/SV/curation/test_decipher_svanna_1124.bed")%>%
filter(ID%in%decipher_pheno$ID & PATHO==1)%>%left_join(decipher_pheno%>%dplyr::select(ID,CNTR))%>%
filter(CNTR%in%c('Full','Partial'))#426
#svanna
svanna_test_coding_pheno= fread("/Volumes/G-DRIVE USB-C/SV/curation/test_decipher_svanna_1124.bed")%>%
filter(DATASET=='svanna' & PATHO==1)#72
setwd("~/Documents/Project_PhenoSV/data/SV/meta")
#noncoding pheno
noncoding_pathogenic= fread("/Volumes/G-DRIVE USB-C/SV/curation/noncoding_pathogenic.bed")
noncoding_pathogenic
table(noncoding_pathogenic)
table(noncoding_pathogenic$V9)
colnames(noncoding_pathogenic) = c('CHR','START','END','ID','SVLEN','STRAND','SVTYPE','PATHO','DATASET')
clinvar_noncoding_pheno = noncoding_pathogenic%>%filter(ID%in%clinvar_pheno$ID )#97
dim(clinvar_noncoding_pheno)
decipher_noncoding_pheno = noncoding_pathogenic%>%filter(ID%in%decipher_pheno$ID )#96
dim(decipher_noncoding_pheno)
svanna_noncoding_pheno = noncoding_pathogenic%>%filter(DATASET=='svanna')#4
noncoding_pheno = rbind(clinvar_noncoding_pheno,decipher_noncoding_pheno,svanna_noncoding_pheno)#197
write.csv(noncoding_pheno,'noncoding_pheno.csv')
setwd("~/Documents/Project_PhenoSV/data/SV/meta")
sv_noncoding_cds.csv=read.csv('sv_noncoding_cds.csv')
dim(sv_noncoding_cds)
sv_noncoding_cds=read.csv('sv_noncoding_cds.csv')
dim(sv_noncoding_cds$PATHO)
table(sv_noncoding_cds$PATHO)
fread('/Volumes/G-DRIVE USB-C/SV/curation/noncoding_pathogenic.bed')
#noncoding pheno
noncoding_pathogenic= fread("/Volumes/G-DRIVE USB-C/SV/curation/noncoding_pathogenic.bed")
colnames(noncoding_pathogenic) = c('CHR','START','END','ID','SVLEN','STRAND','SVTYPE','PATHO','DATASET')
dim(noncoding_pathogenic)
table(noncoding_pathogenic$DATASET)
dim(sv_noncoding_cds.csv)
head(sv_noncoding_cds.csv)
table(sv_noncoding_cds.csv$DATASET)
table(sv_noncoding_cds.csv$DATASET,sv_noncoding_cds.csv$PATHO)
View(sv_noncoding_cds)
setwd("~/Documents/Project_PhenoSV/data/SV/meta")
train_clinvar_coding=read.csv(train_clinvar_coding.csv)
setwd("~/Documents/Project_PhenoSV/data/SV/meta")
train_clinvar_coding=read.csv("train_clinvar_coding.csv")
table(train_clinvar_coding$PATHO)
clinvar_coding=read.csv("validation_clinvar_coding.csv")
table(clinvar_coding$PATHO)
clinvar_coding=read.csv("test_clinvar_coding.csv")
table(clinvar_coding$PATHO)
data=read.csv("decipher_svanna_small_coding.csv")
table(data$PATHO)
data=read.csv("decipher_svanna_large_coding.csv")
table(data$PATHO)
data=read.csv("train_noncoding_eqtl.csv")
table(data$PATHO)
data=read.csv("train_noncoding_svgene.csv")
table(data$PATHO)
head(data)
library(stringr)
str_split_fixed(data$ID[1],"_",2)
str_split(data$ID[1],"_")
paste(str_split(data$ID[1],"_")[[1]],'_')
paste(str_split(data$ID[1],"_")[[1]],collapse = '_')
str_split(data$ID[1],"_")[[1]][:-1]
x_=str_split(data$ID,"_")
x_
lapply(x_, function(x){paste(x[1:(length(x)-1)],collapse = '_')})
remove_gene = function(vec){
x_=str_split(vec,"_")
return(unlist(lapply(x_, function(x){paste(x[1:(length(x)-1)],collapse = '_')})))
}
data$ID = remove_gene(data$ID)
head(data)
data%>%dplyr::select(ID,PATHO)%>%unique()%>%table(PATHO)
data = data%>%dplyr::select(ID,PATHO)%>%unique()
table(data$PATHO)
1637+10929
1008+1903
data=read.csv("validation_noncoding_svgene.csv")
table(data$PATHO)
table(data$PATHO)
data$ID = remove_gene(data$ID)
data = data%>%dplyr::select(ID,PATHO)%>%unique()
table(data$PATHO)
data=read.csv("test_noncoding_svgene.csv")
table(data$PATHO)
261+2248
data$ID = remove_gene(data$ID)
data = data%>%dplyr::select(ID,PATHO)%>%unique()
table(data$PATHO)
141+296
setwd("/Volumes/G-DRIVE USB-C/PhenoSV/noncodingmodel")
list.files()
cds=read.csv("test_noncoding_cds_element_predictions.csv")
cds
cds=read.csv("test_noncoding_cds_element_predictions.csv")[,-1]
cds
cds=read.csv("test_noncoding_cds_element_predictions.csv")[,-1]%>%
mutate(Patho_Score=ifelse(is.na(Patho_Score),0.01,Patho_Score))%>%
rowwise()%>%
mutate(Element_Patho=Element_predictions*Patho_Score)
cds
cds%>%group_by(ID)%>%mutate(c=rank(Element_Patho))
cds%>%group_by(ID)%>%mutate(c=rank(-Element_Patho))
sum(is.na(cds$Element_predictions))
cds = cds%>%group_by(ID)%>%mutate(c=rank(-Element_Patho))%>%filter(c==1)
View(cds)
setwd("/Volumes/G-DRIVE USB-C/PhenoSV/noncodingmodel")
cds=read.csv("test_noncoding_cds_element_predictions.csv")[,-1]%>%
mutate(Patho_Score=ifelse(is.na(Patho_Score),0.01,Patho_Score))%>%
rowwise()%>%
mutate(Element_Patho=Element_predictions*Patho_Score)
length(unique(cds$ID))
cds = cds%>%group_by(ID)%>%mutate(c=rank(-Element_Patho))%>%filter(c==1)
View(cds)
head(cds)
table(cds$SV_label)
237/7850
library(pROC)
performance = function(truth,prediction){
df = data.frame(truth,prediction)%>%filter(is.na(prediction)==F)
truth = df$truth
prediction= df$prediction
acc = function(prediction, truth){
return(sum(round(prediction)==truth)/length(truth))
}
sen = function(prediction, truth){
return(sum(round(prediction)==1 & truth==1)/sum(truth==1))
}
spe = function(prediction, truth){
return(sum(round(prediction)==0 & truth==0)/sum(truth==0))
}
f1=function(prediction, truth){
tp=sum(round(prediction)==1 & truth==1)
fn=sum(round(prediction)==0 & truth==1)
fp=sum(round(prediction)==1 & truth==0)
return(tp/(tp+0.5*(fp+fn)))
}
pre=function(prediction, truth){
return(sum(round(prediction)==1 & truth==1)/sum(round(prediction)==1))
}
AUC=auc(roc(truth,prediction))
ACC=acc(prediction,truth)
SEN=sen(prediction,truth)
SPE=spe(prediction,truth)
F1=f1(prediction,truth)
PRAUC = PRAUC(prediction, truth)
PRE =pre(prediction,truth)
return(data.frame(AUC=AUC,ACC=ACC,SEN=SEN,SPE=SPE,F1=F1,PRAUC=PRAUC,PRE=PRE))
}
performance(cds$SV_label,cds$Element_Patho)
library(stinepack)
library(yardstick)
performance(cds$SV_label,cds$Element_Patho)
library(pROC)
library(ggpubr)
library(MLmetrics)
library(pROC)
library(wesanderson)
library(stinepack)
library(yardstick)
performance = function(truth,prediction){
df = data.frame(truth,prediction)%>%filter(is.na(prediction)==F)
truth = df$truth
prediction= df$prediction
acc = function(prediction, truth){
return(sum(round(prediction)==truth)/length(truth))
}
sen = function(prediction, truth){
return(sum(round(prediction)==1 & truth==1)/sum(truth==1))
}
spe = function(prediction, truth){
return(sum(round(prediction)==0 & truth==0)/sum(truth==0))
}
f1=function(prediction, truth){
tp=sum(round(prediction)==1 & truth==1)
fn=sum(round(prediction)==0 & truth==1)
fp=sum(round(prediction)==1 & truth==0)
return(tp/(tp+0.5*(fp+fn)))
}
pre=function(prediction, truth){
return(sum(round(prediction)==1 & truth==1)/sum(round(prediction)==1))
}
AUC=auc(roc(truth,prediction))
ACC=acc(prediction,truth)
SEN=sen(prediction,truth)
SPE=spe(prediction,truth)
F1=f1(prediction,truth)
PRAUC = PRAUC(prediction, truth)
PRE =pre(prediction,truth)
return(data.frame(AUC=AUC,ACC=ACC,SEN=SEN,SPE=SPE,F1=F1,PRAUC=PRAUC,PRE=PRE))
}
performance(cds$SV_label,cds$Element_Patho)
View(cds)
setwd("/Volumes/G-DRIVE USB-C/PhenoSV/noncodingmodel")
cds=read.csv("test_noncoding_cds_element_predictions.csv")[,-1]
View(cds)
setwd("/Volumes/G-DRIVE USB-C/PhenoSV/noncodingmodel")
cds=read.csv("test_noncoding_cds_element_predictions.csv")[,-1]%>%
mutate(Patho_Score=ifelse(is.na(Patho_Score),0.01,Patho_Score))%>%
rowwise()%>%
mutate(Element_Patho=Element_predictions*Patho_Score)
cds = cds%>%group_by(ID)%>%mutate(c=rank(-Element_Patho))%>%filter(c==1)
table(cds$SV_label)
237/(237+7613)
performance(cds$SV_label,cds$Element_Patho)
setwd("/Volumes/G-DRIVE USB-C/PhenoSV/noncodingmodel")
cds=read.csv("test_noncoding_cds_element_predictions.csv")[,-1]%>%
mutate(Patho_Score=ifelse(is.na(Patho_Score),0.01,Patho_Score))%>%
rowwise()%>%
mutate(Element_Patho=Element_predictions*Patho_Score)
View(cds)
setwd("/Volumes/G-DRIVE USB-C/PhenoSV/noncodingmodel")
cds=read.csv("test_noncoding_cds_element_predictions.csv")[,-1]%>%
mutate(Patho_Score=ifelse(is.na(Patho_Score),0.01,Patho_Score))%>%
rowwise()%>%
mutate(Element_Patho=Element_predictions*Patho_Score)
head(cds)
cds = cds%>%dplyr::select(SV_prediction,SV_label)%>%unique()
performance(cds$SV_label,cds$SV_prediction)
setwd("/Volumes/G-DRIVE USB-C/PhenoSV/noncodingmodel")
cds=read.csv("test_noncoding_cds_element_predictions.csv")[,-1]%>%
mutate(Patho_Score=ifelse(is.na(Patho_Score),0.01,Patho_Score))%>%
rowwise()%>%
mutate(Element_Patho=Element_predictions*Patho_Score)
cds = cds%>%group_by(ID)%>%mutate(c=rank(-Element_Patho))%>%filter(c==1)
head(cds)
cds = cds%>%group_by(ID)%>%mutate(c=rank(-Element_Patho))%>%filter(c==1)%>%
arrange(desc(Element_Patho))
head(cds)
sum(cds$SV_label[1:100])
sum(cds$SV_label[1:200])
sum(cds$SV_label[1:300])
sum(cds$SV_label[1:400])
sum(cds$SV_label[1:500])
sum(cds$SV_label)
setwd("~/Documents/Project_PhenoSV/data/SV/meta")
setwd("~/Documents/Project_PhenoSV/data/SV/meta")
background_data=read.csv('~/Documents/Project_PhenoSV/data/SV/meta/background_data.csv')
head(background_data)
######################################prioritization######################################
setwd("~/Documents/Project_PhenoSV/data/SV/meta")
#coding background
ncbi_common = fread("/Volumes/G-DRIVE USB-C/SV/curation/sv_coding_common_1124.bed")
lr_rare = fread("/Volumes/G-DRIVE USB-C/SV/curation/sv_coding_rare_1124.bed")%>%filter(DATASET=='lr_rare')
coding_background = rbind(ncbi_common,lr_rare)
#noncoding background
lr_rare = fread("/Volumes/G-DRIVE USB-C/SV/curation/sv_noncoding_rare.bed")%>%filter(V9=='lr_rare')
ncbi_common = fread("/Volumes/G-DRIVE USB-C/SV/curation/sv_noncoding_common.bed")
ncbi_common
View(ncbi_common)
setwd("/Volumes/G-DRIVE USB-C/PhenoSV/codingmodel")
list.files()
setwd("/Volumes/G-DRIVE USB-C/PhenoSV/codingmodel/feature_importance")
list.files()
fi = read.csv('clinvar_test_coding_feature_permutations.csv')
head(fi)
fi = read.csv('clinvar_test_coding_feature_permutations.csv')[,-1]
head(fi)
features = read.csv('/Users/karenxu/Documents/Project_PhenoSV/data/Features/featuremaster1026.csv')
features
features = read.csv('/Users/karenxu/Documents/Project_PhenoSV/data/Features/features1026.csv')
features
features = read.csv('/Users/karenxu/Documents/Project_PhenoSV/data/Features/features1026.csv')[,1]
features
rownames(fi)=features
fi$features=features
head(fi)
tail(fi)
fi$features=c('overall',features,'svtype')
head(fi)
View(fi)
fi$acc = fi$acc-fi$acc[1]
fi$auc = fi$auc-fi$auc[1]
head(fi)
fi%>%arrange(auc)
fi = fi%>%arrange(auc)
head(fi)
fi$features[1:10]
fi$features[1:20]
library(ggplot2)
features = read.csv('/Users/karenxu/Documents/Project_PhenoSV/data/Features/features1026.csv')[,1]
fi = read.csv('clinvar_test_coding_feature_permutations.csv')[,-1]
fi$features=c('overall',features,'svtype')
fi$acc = -(fi$acc-fi$acc[1])
fi$auc = -(fi$auc-fi$auc[1])
fi = fi%>%arrange(desc(auc))
fi$features[1:20]
fi
ggplot(fi[1:20],aes(x=features,y=auc))+geom_bar()
ggplot(fi[1:20,],aes(x=features,y=auc))+geom_bar()
ggplot(fi[1:20,],aes(x=features,y=auc))
ggplot(fi[1:20,],aes(x=features,y=auc))+
geom_point()
ggplot(fi[1:20,],aes(x=features,y=auc))+
geom_bar()
ggplot(fi[1:20,],aes(x=features,y=auc))+
geom_bar(stat='identity')
ggplot(fi[1:20,],aes(x=features,y=auc))+
geom_bar(stat='identity',width = 0.5)+
coord_flip()
fi$features = factor(fi$features,levels = unique(fi$features))
ggplot(fi[1:20,],aes(x=features,y=auc))+
geom_bar(stat='identity',width = 0.5)+
coord_flip()
features = read.csv('/Users/karenxu/Documents/Project_PhenoSV/data/Features/features1026.csv')[,1]
fi = read.csv('clinvar_test_coding_feature_permutations.csv')[,-1]
fi$features=c('overall',features,'svtype')
fi$acc = -(fi$acc-fi$acc[1])
fi$auc = -(fi$auc-fi$auc[1])
?fct_rev
fi$features = factor(fi$features,levels = rev(unique(fi$features)))
library(ggplot2)
ggplot(fi[1:20,],aes(x=features,y=auc))+
geom_bar(stat='identity',width = 0.5)+
coord_flip()
features = read.csv('/Users/karenxu/Documents/Project_PhenoSV/data/Features/features1026.csv')[,1]
fi = read.csv('clinvar_test_coding_feature_permutations.csv')[,-1]
fi$features=c('overall',features,'svtype')
fi$acc = -(fi$acc-fi$acc[1])
fi$auc = -(fi$auc-fi$auc[1])
fi = fi%>%arrange(desc(auc))
fi$features = factor(fi$features,levels = rev(unique(fi$features)))
library(ggplot2)
ggplot(fi[1:20,],aes(x=features,y=auc))+
geom_bar(stat='identity',width = 0.5)+
coord_flip()
ggplot(fi[1:20,],aes(x=features,y=auc))+
geom_bar(stat='identity',width = 0.5)+
coord_flip()+labs()
ggplot(fi[1:20,],aes(x=features,y=auc))+
geom_bar(stat='identity',width = 0.5)+
coord_flip()+labs(x='importance')
ggplot(fi[1:20,],aes(x=features,y=auc))+
geom_bar(stat='identity',width = 0.5)+
coord_flip()+
labs(y='importance')
setwd("~/Documents/Project_PhenoSV/data/SV/meta")
sv_noncoding_cds=read.csv('sv_noncoding_cds.csv')
table(sv_noncoding_cds$PATHO)
setwd("/Volumes/G-DRIVE USB-C/PhenoSV/noncodingmodel")
cds=read.csv("test_noncoding_cds_element_predictions.csv")[,-1]%>%
mutate(Patho_Score=ifelse(is.na(Patho_Score),0.01,Patho_Score))%>%
rowwise()%>%
mutate(Element_Patho=Element_predictions*Patho_Score)
cds = cds%>%group_by(ID)%>%mutate(c=rank(-Element_Patho))%>%filter(c==1)%>%
arrange(desc(Element_Patho))
performance(cds$SV_label,cds$Element_Patho)
getwd()
setwd("/Volumes/G-DRIVE USB-C/PhenoSV/noncodingmodel")
cds=read.csv("test_noncoding_cds_element_predictions.csv")[,-1]%>%
mutate(Patho_Score=ifelse(is.na(Patho_Score),0.01,Patho_Score))%>%
rowwise()%>%
mutate(Element_Patho=Element_predictions*Patho_Score)
head(cds)
setwd("~/Documents/Project_PhenoSV/data/SV/meta")
sv_noncoding_cds=read.csv("sv_noncoding_cds.csv")
sv_noncoding_cds
hist(log10(sv_noncoding_cds$SVLEN))
hist(log10(sv_noncoding_cds$SVLEN),100)
median(sv_noncoding_cds$SVLEN)
train_noncoding_svgene=read.csv('train_noncoding_svgene.csv ')
train_noncoding_svgene=read.csv('train_noncoding_svgene.csv')
median(train_noncoding_svgene$SVLEN)
hist(log(train_noncoding_svgene$SVLEN))
hist(log(train_noncoding_svgene$SVLEN),100)
hist(log10(train_noncoding_svgene$SVLEN),100)
hist(log10(sv_noncoding_cds$SVLEN),100)
temp=sv_noncoding_cds
temp=sv_noncoding_cds
train_noncoding_svgene
train_noncoding_eqtl=read.csv('train_noncoding_eqtl.csv')
rbind(sv_noncoding_cds,train_noncoding_eqtl)
temp = rbind(sv_noncoding_cds,train_noncoding_eqtl)
View(temp)
temp = rbind(sv_noncoding_cds,train_noncoding_eqtl)%>%arrange(CHR,START,END)
View(temp)
View(data)
#patho_alpha =
cds=read.csv("test_noncoding_cds_element_predictions.csv")[,-1]%>%
mutate(Patho_Score=ifelse(is.na(Patho_Score),0.01,Patho_Score))%>%
rowwise()%>%
mutate(Element_Patho=Element_predictions*Patho_Score)
setwd("/Volumes/G-DRIVE USB-C/PhenoSV/noncodingmodel")
#patho_alpha =
cds=read.csv("test_noncoding_cds_element_predictions.csv")[,-1]%>%
mutate(Patho_Score=ifelse(is.na(Patho_Score),0.01,Patho_Score))%>%
rowwise()%>%
mutate(Element_Patho=Element_predictions*Patho_Score)
View(cds)
View(train_noncoding_eqtl)
View(train_noncoding_svgene)
202/(202+535)
?eigenMapMatMult
?sna
setwd("~/Documents/HeterNep/git/MultiNEP/R")
usethis::use_package(SMUT)
usethis::use_package("SMUT")
